====
Overview

what i need is

	| sound input | -> | waveshaper | -> | output |


====
Progress

(20211003)

i now have a (very rudimentary) working copy of some kind of distortion/shaper

1) i used a combination of the dev tutorial and the approach from dirty mirror-based
   shaper for ardcore (from TTNM)
   
   NOTE: I think i might want to add a 1_pole as mentioned in dev tutorial for 
         'smoothing out' changes to wShape

2) this is essentially what i did
   (maybe easier to look at shaperMix module mix.c, params.c, params.h, though)

   # params.h
  
     added: 
     eParam_wShape 
     to: 
     enum params { } (line 39)

   # params.c

     added the param info:

     //MY PARAMS FOR wShape
     //based on waves param.c (waves10, and waves01)
     strcpy(desc[eParam_wShape].label, "wShape");
     desc[eParam_wShape].type = eParamTypeFix;
     desc[eParam_wShape].min = 0x00000000; 
     desc[eParam_wShape].max = PARAM_CV_MAX;
     desc[eParam_wShape].radix = 16;

     NOTE: i used PARAM_MAX_CV, because of the way that I am controling
           outBus in mix.c, and it was the only thing that gave me the 
           values in a range that caused an audible difference

   # mix.c
     
     (going from top to bottom)

     added: 
     static fract32 wShape;

     initialized paramerter:
     //MY PARAM SETUP FOR SHAPER
     //based on waves.c (eParamWave01, and 10)
     param_setup(eParam_wShape, 0);

     set outBus equal to outBus - wShape (with blackfin intrinsic)
     outBus = sub_fr1x32( outBus, wShape);

     NOTE: this works, but the change does not become audible until 
           wShape value is close to 32k
           i adjusted the ENC value to start at around 32180, and increment
           by five until it hits the top of the range, which seems to work ok

     NOTE: this is also effected by input value
           when input value is almost peaked, the folder will become audible in 
           some cases (even if wShape is lower...)


     added another case for my shaper value (based on dev tutorial):
     //MY SHAPER VALUE
     //1) knob-turn value is converted to fract16 and returned (line 226)
     //2) adcValue[0] and converted knob turn value sent to set_wShape()
     //to complex, and dont know what type adcSlew is to make secondary func...
   case eParam_wShape :
     //set_wShape_amt ( &(adcSlew[0]), param_unit_to_fr16(v) );
     wShape = v;
     break;

  
   






















========================================================================================
========================================================================================
========================================================================================
THIS IS ALL OLD, BUT COULD BE USEFUL(?)

what i should do is

1) use mixer as a template
   create a new version called shaperMix or something...

2) add a fract32 variable (container for 'shaped' input)
   fract32 waveShaper = 0;

3) create a separate .h file just for shaper function prototype
   - this might make it a bit messier (need to include more .h files)
   - BUT! will also make the whole thing more modular, and less confusing
     (easier to see how the effects actually work...)

4) use the osc_waves.h function prototype as a guide, but change slightly to:
   extern void input_waveshaper(in* in, fract32 waveShapter);

5) in shaperMix.c, do param setup for shaper:
   param_setup(eParam_wave, 0);








======
osc_waves.h

the function i need (from waves) is

-//shape modulation input
-extern void osc_wm_in(osc* osc, fract32 wm);

and its prototype lives in osc_waves.h

======
osc_waves.c

function is used as

//shape modulation input
void osc_wm_in(osc* osc, fract32 val)
{
  osc->wm = val;
}






=======
waves.c

in waves.c there is a fract32 variable that is part of
-typedef struct _waveVoice {}

and it is called:
-fract32 wmIn;

we also need to set parameter to default
-param_setup( eParamWave0, 0);

======
params.h

incidentally, param def lives in params.c

strcpy(dec[eParamWave0].label, "waves0");
desc[eParamWave0].type = eParamTypeFix;
desc[eParamWave0].min = 0;
desc[eParamWave0].max = FRACT32_MAX;
desc[eParamWave0].radix = 1;

this is good, because we know we need eParamTypeFix for 
wavefolder!


