20220815

So, reducing the voice count gets us to full volume (osc.h)
I also came up with a simple bees network to play with akai minikey 
-includes correct velocity and pitch
--divide midi scale (127) by full aleph scale (32767) to get approx 258
--can use 258 as B value in MUL to get the correct value for velocity and pitch (Hz)
--need IS inot LIST2 becuase minikey value stays at 127 even after key release...

ALSO! figured out how to create custom wavetables using supercollider script based on
original script (and others discovered on web)!! 
may need wwttool(?) too but conversion method in supercollider appears to be working now!

planning on:
1) increasing number of voices (all same wavetable, but thats ok for now) to make poly!
2) need to do routing so each voice takes a separate value to build like an arp where pressing
   only one key will take that value (after mult x258) and add the required number of semitones
   to get all values in a (major chord)!



20220612

I figured out that shifting back down to 24b (around line 257 of table_voice.c, or params_adjusted_table_voice.c) 
was causing the volume/levels issues.
commenting that out appears to have fixed the problem!! yeah!

I also changed some of the params (and upper and lower values) in line with multi_voice/params.c and params.h
- i like eParamTypeNote for Hz-type values

Remaining issues:
(1) fine adjustment does not seem to do anything (i dont use fine adjustments so much, but do want to fix this...)
(2) probably sine_table_inc.c should be in external memory? (just declared as const fract32 on line 65...)
(3) maybe create a new function to hold lines 232 to 252(?)
    - dont want to recreate this code for each new voice...

Questions:
(1) is this method less 'expensive' than waves-type wavetable or osc_polyblep method?
(2) can i generate my own 'tables' from samples? (like not just sine, saw, etc.)





20220611

surprisingly(!) it does kind of work
but some problems
(1) VERY quiet
    - no sound with base eParam settings
    - need to turn physical out knob on aleph front panel all the way up (a sign of trouble...)
    - need to turn both amps all the way up (to 0)
    - then need to adjust Hz up till start to hear it
			- does go silent at higher frequencies, but probably due to volume issues.

(2) Tune does nothing
    - not that i can tell anyway

(3) amp0 actually controlls Hz(?)
    - this is just weird, but you can mess around with amp0 setting to see what i mean

(4) general oddness
    - since this is a pretty rough hack ( i didnt expect it to work at all)
      i think i am missing some of the nuances
    - the original rawsc actually just appears to cascade the functions, so the 
      equivalent(?) of module_process_frame is not void and recieves the idx from above
      as input
    
